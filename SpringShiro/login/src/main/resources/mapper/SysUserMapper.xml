<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzw.login.dao.SysUserMapper">
    <resultMap id="BaseResultMap" type="com.zzw.login.pojo.SysUser">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="auth_salt" jdbcType="VARCHAR" property="authSalt"/>
        <result column="auth_salt_num" jdbcType="INTEGER" property="authSaltNum"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    user_id, user_name, nick_name, password, auth_salt, auth_salt_num, status, remark
  </sql>
    <select id="selectByExample" parameterType="com.zzw.login.pojo.SysUserExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from sysauth_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sysauth_user
        where user_id = #{userId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sysauth_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.zzw.login.pojo.SysUserExample">
        delete from sysauth_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.zzw.login.pojo.SysUser">
    insert into sysauth_user (user_id, user_name, nick_name, 
      password, auth_salt, auth_salt_num, 
      status, remark)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{authSalt,jdbcType=VARCHAR}, #{authSaltNum,jdbcType=INTEGER}, 
      #{status,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.zzw.login.pojo.SysUser">
        insert into sysauth_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="nickName != null">
                nick_name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="authSalt != null">
                auth_salt,
            </if>
            <if test="authSaltNum != null">
                auth_salt_num,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="authSalt != null">
                #{authSalt,jdbcType=VARCHAR},
            </if>
            <if test="authSaltNum != null">
                #{authSaltNum,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.zzw.login.pojo.SysUserExample" resultType="java.lang.Long">
        select count(*) from sysauth_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update sysauth_user
        <set>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.nickName != null">
                nick_name = #{record.nickName,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.authSalt != null">
                auth_salt = #{record.authSalt,jdbcType=VARCHAR},
            </if>
            <if test="record.authSaltNum != null">
                auth_salt_num = #{record.authSaltNum,jdbcType=INTEGER},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update sysauth_user
        set user_id = #{record.userId,jdbcType=INTEGER},
        user_name = #{record.userName,jdbcType=VARCHAR},
        nick_name = #{record.nickName,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        auth_salt = #{record.authSalt,jdbcType=VARCHAR},
        auth_salt_num = #{record.authSaltNum,jdbcType=INTEGER},
        status = #{record.status,jdbcType=TINYINT},
        remark = #{record.remark,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.zzw.login.pojo.SysUser">
        update sysauth_user
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="authSalt != null">
                auth_salt = #{authSalt,jdbcType=VARCHAR},
            </if>
            <if test="authSaltNum != null">
                auth_salt_num = #{authSaltNum,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zzw.login.pojo.SysUser">
    update sysauth_user
    set user_name = #{userName,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      auth_salt = #{authSalt,jdbcType=VARCHAR},
      auth_salt_num = #{authSaltNum,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

    <select id="queryUserByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sysauth_user where user_name = #{username,jdbcType=VARCHAR} or nick_name = #{username,jdbcType=VARCHAR}
    </select>

    <select id="queryRolesByUserId" parameterType="java.lang.Integer" resultType="java.lang.String">
        select t1.role_name from sysauth_role t1
        where exists (select 1 from sysauth_user_role t2 where t1.role_id = t2.role_id and t2.user_id = #{userId,jdbcType=INTEGER})
    </select>

    <select id="queryRoleIdsByUserId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        select role_id from sysauth_user_role where user_id = #{userId,jdbcType=INTEGER} group by role_id
    </select>

    <select id="queryPermissionsByRoles" parameterType="java.util.List" resultType="java.lang.String">
        select t1.permission_name from sysauth_permission t1 where exists
        (select 1 from sysauth_role_permission t2 where t1.permission_id = t2.permission_id and t2.role_id in
        <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
            #{item,jdbcType=INTEGER}
        </foreach>
        ) group by t1.permission_id
    </select>

    <select id="countRequestUri" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(url) from (
        select t1.*,concat(t2.menu_url,t1.menu_url)as url from sysauth_menu_permission t1
        left join sysauth_menu_permission t2 on t1.parent_id = t2.menu_id) t3 where url = #{url,jdbcType=VARCHAR}
    </select>

    <select id="queryMenusByUserId" parameterType="java.lang.Integer" resultType="java.lang.String">
        select distinct url from (
            select t1.*,concat(t2.menu_url,t1.menu_url)as url from
                (select * from sysauth_menu_permission where permission_id in (
                    select distinct permission_id from sysauth_role_permission where role_id in
                    (select distinct role_id from sysauth_user_role where user_id = #{userId,jdbcType=INTEGER}))
                ) t1
        left join sysauth_menu_permission t2 on t1.parent_id = t2.menu_id ) t3 where url is not null
    </select>
</mapper>